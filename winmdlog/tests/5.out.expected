// GpioController.cpp
// Copyright (c) Microsoft Corporation. All rights reserved.
#include "GpioController.h"

using namespace Microsoft::WRL;


namespace Windows
{
namespace Devices
{
namespace Gpio
{
// Windows::Devices::Gpio::IGpioController
IFACEMETHODIMP GpioController::OpenPin(_In_ INT32 /* pinNumber */, _Outptr_ IGpioPin** /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioController
IFACEMETHODIMP GpioController::OpenPin(_In_ INT32 /* pinNumber */, _In_ GpioSharingMode /* sharingMode */, _Outptr_ IGpioPin** /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioController
IFACEMETHODIMP GpioController::TryOpenPin(_In_ INT32 /* pinNumber */, _In_ GpioSharingMode /* sharingMode */, _Outptr_ IGpioPin** /* pin */, _Out_ GpioOpenStatus* /* openStatus */, _Out_ boolean* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioController
IFACEMETHODIMP GpioController::get_PinCount(_Out_ INT32* /* value */)
{
    return E_NOTIMPL;
}

}
}
}

// GpioController.h
// Copyright (c) Microsoft Corporation. All rights reserved.
#pragma once

#include <Windows.Devices.h>
#include "GpioControllerFactory.h"
#include <wrl/implements.h>

namespace Windows
{
namespace Devices
{
namespace Gpio
{
class GpioController WrlFinal : public Microsoft::WRL::RuntimeClass<
    Microsoft::WRL::FtmBase,
    Windows::Devices::Gpio::IGpioController
    >
{
    InspectableClass(RuntimeClass_Windows_Devices_Gpio_GpioController, TrustLevel::BaseTrust);

public:
    GpioController();
    HRESULT RuntimeClassInitialize();

    // Windows::Devices::Gpio::IGpioController
    IFACEMETHOD(OpenPin)(_In_ INT32 /* pinNumber */, _Outptr_ Windows::Devices::Gpio::IGpioPin** /* value */);
    IFACEMETHOD(OpenPin)(_In_ INT32 /* pinNumber */, _In_ Windows::Devices::Gpio::GpioSharingMode /* sharingMode */, _Outptr_ Windows::Devices::Gpio::IGpioPin** /* value */);
    IFACEMETHOD(TryOpenPin)(_In_ INT32 /* pinNumber */, _In_ Windows::Devices::Gpio::GpioSharingMode /* sharingMode */, _Outptr_ Windows::Devices::Gpio::IGpioPin** /* pin */, _Out_ Windows::Devices::Gpio::GpioOpenStatus* /* openStatus */, _Out_ boolean* /* value */);
    IFACEMETHOD(get_PinCount)(_Out_ INT32* value);

private:

};


}
}
}

// GpioControllerFactory.cpp
// Copyright (c) Microsoft Corporation. All rights reserved.
#include "GpioControllerFactory.h"

using namespace Microsoft::WRL;
using namespace Windows::Devices::Gpio::Provider;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;

namespace Windows
{
namespace Devices
{
namespace Gpio
{
// Windows::Devices::Gpio::IGpioControllerStatics
IFACEMETHODIMP GpioControllerFactory::GetDefault(_Outptr_ IGpioController** /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioControllerStatics2
IFACEMETHODIMP GpioControllerFactory::GetControllersAsync(_In_ IGpioProvider* /* provider */, _Outptr_ IAsyncOperation<IVectorView<GpioController>>** /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioControllerStatics2
IFACEMETHODIMP GpioControllerFactory::GetDefaultAsync(_Outptr_ IAsyncOperation<IGpioController>** /* value */)
{
    return E_NOTIMPL;
}

// IActivationFactory
IFACEMETHODIMP GpioControllerFactory::ActivateInstance(_Outptr_ IInspectable** inspectable)
{
    return E_NOTIMPL;
}

}
}
}

// GpioControllerFactory.h
// Copyright (c) Microsoft Corporation. All rights reserved.
#pragma once

#include <Windows.Devices.h>
#include <Windows.Foundation.h>
#include <wrl/implements.h>

namespace Windows
{
namespace Devices
{
namespace Gpio
{
class GpioControllerFactory WrlFinal : public Microsoft::WRL::AgileActivationFactory<
    Windows::Devices::Gpio::IGpioControllerStatics,
    Windows::Devices::Gpio::IGpioControllerStatics2
    >
{
    InspectableClassStatic(RuntimeClass_Windows_Devices_Gpio_GpioControllerFactory, TrustLevel::BaseTrust);

public:
    GpioControllerFactory();
    HRESULT RuntimeClassInitialize();

    // Windows::Devices::Gpio::IGpioControllerStatics
    IFACEMETHOD(GetDefault)(_Outptr_ Windows::Devices::Gpio::IGpioController** /* value */);

    // Windows::Devices::Gpio::IGpioControllerStatics2
    IFACEMETHOD(GetControllersAsync)(_In_ Windows::Devices::Gpio::Provider::IGpioProvider* /* provider */, _Outptr_ Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Gpio::GpioController>>** /* value */);
    IFACEMETHOD(GetDefaultAsync)(_Outptr_ Windows::Foundation::IAsyncOperation<Windows::Devices::Gpio::IGpioController>** /* value */);

    // IActivationFactory
    IFACEMETHOD(ActivateInstance)(_Outptr_ IInspectable** inspectable);

private:

};


}
}
}

