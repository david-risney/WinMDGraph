// DataPackagePropertySet.cpp
// Copyright (c) Microsoft Corporation. All rights reserved.
#include "DataPackagePropertySet.h"

using namespace Microsoft::WRL;
using namespace Windows::Foundation::Collections;
using namespace Windows::Foundation;
using namespace Windows::Storage::Streams;
using namespace Windows::UI;

namespace Windows
{
namespace ApplicationModel
{
namespace DataTransfer
{
// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::get_FileTypes(_Outptr_ IVector<HSTRING>** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::get_ApplicationListingUri(_Outptr_ IUriRuntimeClass** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::put_ApplicationListingUri(_In_ IUriRuntimeClass* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::get_ApplicationName(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::put_ApplicationName(_In_ HSTRING /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::get_Description(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::put_Description(_In_ HSTRING /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::get_Thumbnail(_Outptr_ IRandomAccessStreamReference** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::put_Thumbnail(_In_ IRandomAccessStreamReference* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::get_Title(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
IFACEMETHODIMP DataPackagePropertySet::put_Title(_In_ HSTRING /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMap<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySet::Lookup(_In_ HSTRING /* key */, _Outptr_ IInspectable** /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMap<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySet::HasKey(_In_ HSTRING /* key */, _Out_ boolean* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMap<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySet::GetView(_Outptr_ IMapView<HSTRING, IInspectable>** /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMap<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySet::Insert(_In_ HSTRING /* key */, _In_ IInspectable* /* value */, _Out_ boolean* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMap<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySet::Remove(_In_ HSTRING /* key */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMap<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySet::Clear()
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMap<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySet::get_Size(_Out_ UINT32* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING, IInspectable>>
IFACEMETHODIMP DataPackagePropertySet::First(_Outptr_ IIterator<IKeyValuePair<HSTRING, IInspectable>>** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
IFACEMETHODIMP DataPackagePropertySet::get_ContentSourceApplicationLink(_Outptr_ IUriRuntimeClass** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
IFACEMETHODIMP DataPackagePropertySet::put_ContentSourceApplicationLink(_In_ IUriRuntimeClass* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
IFACEMETHODIMP DataPackagePropertySet::get_ContentSourceWebLink(_Outptr_ IUriRuntimeClass** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
IFACEMETHODIMP DataPackagePropertySet::put_ContentSourceWebLink(_In_ IUriRuntimeClass* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
IFACEMETHODIMP DataPackagePropertySet::get_LogoBackgroundColor(_Out_ Color* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
IFACEMETHODIMP DataPackagePropertySet::put_LogoBackgroundColor(_In_ Color /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
IFACEMETHODIMP DataPackagePropertySet::get_PackageFamilyName(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
IFACEMETHODIMP DataPackagePropertySet::put_PackageFamilyName(_In_ HSTRING /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
IFACEMETHODIMP DataPackagePropertySet::get_Square30x30Logo(_Outptr_ IRandomAccessStreamReference** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
IFACEMETHODIMP DataPackagePropertySet::put_Square30x30Logo(_In_ IRandomAccessStreamReference* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3
IFACEMETHODIMP DataPackagePropertySet::get_EnterpriseId(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3
IFACEMETHODIMP DataPackagePropertySet::put_EnterpriseId(_In_ HSTRING /* value */)
{
    return E_NOTIMPL;
}

}
}
}

// DataPackagePropertySet.h
// Copyright (c) Microsoft Corporation. All rights reserved.
#pragma once

#include <Windows.ApplicationModel.h>
#include <Windows.Foundation.h>
#include <Windows.Storage.h>
#include <Windows.UI.h>
#include <wrl/implements.h>

namespace Windows
{
namespace ApplicationModel
{
namespace DataTransfer
{
class DataPackagePropertySet WrlFinal : public Microsoft::WRL::RuntimeClass<
    Microsoft::WRL::FtmBase,
    Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet,
    Windows::Foundation::Collections::IMap<HSTRING, IInspectable>,
    Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING, IInspectable>>,
    Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2,
    Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3
    >
{
    InspectableClass(RuntimeClass_Windows_ApplicationModel_DataTransfer_DataPackagePropertySet, TrustLevel::BaseTrust);

public:
    DataPackagePropertySet();
    HRESULT RuntimeClassInitialize();

    // Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet
    IFACEMETHOD(get_FileTypes)(_Outptr_ Windows::Foundation::Collections::IVector<HSTRING>** value);
    IFACEMETHOD(get_ApplicationListingUri)(_Outptr_ Windows::Foundation::IUriRuntimeClass** value);
    IFACEMETHOD(put_ApplicationListingUri)(_In_ Windows::Foundation::IUriRuntimeClass* value);
    IFACEMETHOD(get_ApplicationName)(_Out_ HSTRING* value);
    IFACEMETHOD(put_ApplicationName)(_In_ HSTRING value);
    IFACEMETHOD(get_Description)(_Out_ HSTRING* value);
    IFACEMETHOD(put_Description)(_In_ HSTRING value);
    IFACEMETHOD(get_Thumbnail)(_Outptr_ Windows::Storage::Streams::IRandomAccessStreamReference** value);
    IFACEMETHOD(put_Thumbnail)(_In_ Windows::Storage::Streams::IRandomAccessStreamReference* value);
    IFACEMETHOD(get_Title)(_Out_ HSTRING* value);
    IFACEMETHOD(put_Title)(_In_ HSTRING value);

    // Windows::Foundation::Collections::IMap<HSTRING, IInspectable>
    IFACEMETHOD(Lookup)(_In_ HSTRING /* key */, _Outptr_ IInspectable** /* value */);
    IFACEMETHOD(HasKey)(_In_ HSTRING /* key */, _Out_ boolean* /* value */);
    IFACEMETHOD(GetView)(_Outptr_ Windows::Foundation::Collections::IMapView<HSTRING, IInspectable>** /* value */);
    IFACEMETHOD(Insert)(_In_ HSTRING /* key */, _In_ IInspectable* /* value */, _Out_ boolean* /* value */);
    IFACEMETHOD(Remove)(_In_ HSTRING /* key */);
    IFACEMETHOD(Clear)();
    IFACEMETHOD(get_Size)(_Out_ UINT32* value);

    // Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING, IInspectable>>
    IFACEMETHOD(First)(_Outptr_ Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING, IInspectable>>** /* value */);

    // Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2
    IFACEMETHOD(get_ContentSourceApplicationLink)(_Outptr_ Windows::Foundation::IUriRuntimeClass** value);
    IFACEMETHOD(put_ContentSourceApplicationLink)(_In_ Windows::Foundation::IUriRuntimeClass* value);
    IFACEMETHOD(get_ContentSourceWebLink)(_Outptr_ Windows::Foundation::IUriRuntimeClass** value);
    IFACEMETHOD(put_ContentSourceWebLink)(_In_ Windows::Foundation::IUriRuntimeClass* value);
    IFACEMETHOD(get_LogoBackgroundColor)(_Out_ Windows::UI::Color* value);
    IFACEMETHOD(put_LogoBackgroundColor)(_In_ Windows::UI::Color value);
    IFACEMETHOD(get_PackageFamilyName)(_Out_ HSTRING* value);
    IFACEMETHOD(put_PackageFamilyName)(_In_ HSTRING value);
    IFACEMETHOD(get_Square30x30Logo)(_Outptr_ Windows::Storage::Streams::IRandomAccessStreamReference** value);
    IFACEMETHOD(put_Square30x30Logo)(_In_ Windows::Storage::Streams::IRandomAccessStreamReference* value);

    // Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3
    IFACEMETHOD(get_EnterpriseId)(_Out_ HSTRING* value);
    IFACEMETHOD(put_EnterpriseId)(_In_ HSTRING value);

private:

};


}
}
}

// DataPackagePropertySetView.cpp
// Copyright (c) Microsoft Corporation. All rights reserved.
#include "DataPackagePropertySetView.h"

using namespace Microsoft::WRL;
using namespace Windows::Foundation::Collections;
using namespace Windows::Foundation;
using namespace Windows::Storage::Streams;
using namespace Windows::UI;

namespace Windows
{
namespace ApplicationModel
{
namespace DataTransfer
{
// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView
IFACEMETHODIMP DataPackagePropertySetView::get_ApplicationListingUri(_Outptr_ IUriRuntimeClass** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView
IFACEMETHODIMP DataPackagePropertySetView::get_ApplicationName(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView
IFACEMETHODIMP DataPackagePropertySetView::get_Description(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView
IFACEMETHODIMP DataPackagePropertySetView::get_FileTypes(_Outptr_ IVectorView<HSTRING>** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView
IFACEMETHODIMP DataPackagePropertySetView::get_Thumbnail(_Outptr_ IRandomAccessStreamReference** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView
IFACEMETHODIMP DataPackagePropertySetView::get_Title(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMapView<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySetView::Lookup(_In_ HSTRING /* key */, _Outptr_ IInspectable** /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMapView<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySetView::HasKey(_In_ HSTRING /* key */, _Out_ boolean* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMapView<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySetView::Split(_Outptr_ IMapView<HSTRING, IInspectable>** /* first */, _Outptr_ IMapView<HSTRING, IInspectable>** /* second */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IMapView<HSTRING, IInspectable>
IFACEMETHODIMP DataPackagePropertySetView::get_Size(_Out_ UINT32* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING, IInspectable>>
IFACEMETHODIMP DataPackagePropertySetView::First(_Outptr_ IIterator<IKeyValuePair<HSTRING, IInspectable>>** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2
IFACEMETHODIMP DataPackagePropertySetView::get_ContentSourceApplicationLink(_Outptr_ IUriRuntimeClass** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2
IFACEMETHODIMP DataPackagePropertySetView::get_ContentSourceWebLink(_Outptr_ IUriRuntimeClass** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2
IFACEMETHODIMP DataPackagePropertySetView::get_LogoBackgroundColor(_Out_ Color* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2
IFACEMETHODIMP DataPackagePropertySetView::get_PackageFamilyName(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2
IFACEMETHODIMP DataPackagePropertySetView::get_Square30x30Logo(_Outptr_ IRandomAccessStreamReference** /* value */)
{
    return E_NOTIMPL;
}

// Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView3
IFACEMETHODIMP DataPackagePropertySetView::get_EnterpriseId(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

}
}
}

// DataPackagePropertySetView.h
// Copyright (c) Microsoft Corporation. All rights reserved.
#pragma once

#include <Windows.ApplicationModel.h>
#include <Windows.Foundation.h>
#include <Windows.Storage.h>
#include <Windows.UI.h>
#include <wrl/implements.h>

namespace Windows
{
namespace ApplicationModel
{
namespace DataTransfer
{
class DataPackagePropertySetView WrlFinal : public Microsoft::WRL::RuntimeClass<
    Microsoft::WRL::FtmBase,
    Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView,
    Windows::Foundation::Collections::IMapView<HSTRING, IInspectable>,
    Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING, IInspectable>>,
    Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2,
    Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView3
    >
{
    InspectableClass(RuntimeClass_Windows_ApplicationModel_DataTransfer_DataPackagePropertySetView, TrustLevel::BaseTrust);

public:
    DataPackagePropertySetView();
    HRESULT RuntimeClassInitialize();

    // Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView
    IFACEMETHOD(get_ApplicationListingUri)(_Outptr_ Windows::Foundation::IUriRuntimeClass** value);
    IFACEMETHOD(get_ApplicationName)(_Out_ HSTRING* value);
    IFACEMETHOD(get_Description)(_Out_ HSTRING* value);
    IFACEMETHOD(get_FileTypes)(_Outptr_ Windows::Foundation::Collections::IVectorView<HSTRING>** value);
    IFACEMETHOD(get_Thumbnail)(_Outptr_ Windows::Storage::Streams::IRandomAccessStreamReference** value);
    IFACEMETHOD(get_Title)(_Out_ HSTRING* value);

    // Windows::Foundation::Collections::IMapView<HSTRING, IInspectable>
    IFACEMETHOD(Lookup)(_In_ HSTRING /* key */, _Outptr_ IInspectable** /* value */);
    IFACEMETHOD(HasKey)(_In_ HSTRING /* key */, _Out_ boolean* /* value */);
    IFACEMETHOD(Split)(_Outptr_ Windows::Foundation::Collections::IMapView<HSTRING, IInspectable>** /* first */, _Outptr_ Windows::Foundation::Collections::IMapView<HSTRING, IInspectable>** /* second */);
    IFACEMETHOD(get_Size)(_Out_ UINT32* value);

    // Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING, IInspectable>>
    IFACEMETHOD(First)(_Outptr_ Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING, IInspectable>>** /* value */);

    // Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2
    IFACEMETHOD(get_ContentSourceApplicationLink)(_Outptr_ Windows::Foundation::IUriRuntimeClass** value);
    IFACEMETHOD(get_ContentSourceWebLink)(_Outptr_ Windows::Foundation::IUriRuntimeClass** value);
    IFACEMETHOD(get_LogoBackgroundColor)(_Out_ Windows::UI::Color* value);
    IFACEMETHOD(get_PackageFamilyName)(_Out_ HSTRING* value);
    IFACEMETHOD(get_Square30x30Logo)(_Outptr_ Windows::Storage::Streams::IRandomAccessStreamReference** value);

    // Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView3
    IFACEMETHOD(get_EnterpriseId)(_Out_ HSTRING* value);

private:

};


}
}
}

