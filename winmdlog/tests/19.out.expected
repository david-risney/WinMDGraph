// PerceptionCorrelation.cpp
// Copyright (c) Microsoft Corporation. All rights reserved.
#include "PerceptionCorrelation.h"

using namespace Microsoft::WRL;
using namespace Windows::Foundation::Numerics;

namespace Windows
{
namespace Devices
{
namespace Perception
{
namespace Provider
{
// Windows::Devices::Perception::Provider::IPerceptionCorrelation
IFACEMETHODIMP PerceptionCorrelation::get_Orientation(_Out_ Quaternion* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Perception::Provider::IPerceptionCorrelation
IFACEMETHODIMP PerceptionCorrelation::get_Position(_Out_ Vector3* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Perception::Provider::IPerceptionCorrelation
IFACEMETHODIMP PerceptionCorrelation::get_TargetId(_Out_ HSTRING* /* value */)
{
    return E_NOTIMPL;
}

}
}
}
}

// PerceptionCorrelation.h
// Copyright (c) Microsoft Corporation. All rights reserved.
#pragma once

#include <Windows.Devices.h>
#include <Windows.Foundation.h>
#include "PerceptionCorrelationFactory.h"
#include <wrl/implements.h>

namespace Windows
{
namespace Devices
{
namespace Perception
{
namespace Provider
{
class PerceptionCorrelation WrlFinal : public Microsoft::WRL::RuntimeClass<
    Microsoft::WRL::FtmBase,
    Windows::Devices::Perception::Provider::IPerceptionCorrelation
    >
{
    InspectableClass(RuntimeClass_Windows_Devices_Perception_Provider_PerceptionCorrelation, TrustLevel::BaseTrust);

public:
    PerceptionCorrelation();
    HRESULT RuntimeClassInitialize();

    // Windows::Devices::Perception::Provider::IPerceptionCorrelation
    IFACEMETHOD(get_Orientation)(_Out_ Windows::Foundation::Numerics::Quaternion* value);
    IFACEMETHOD(get_Position)(_Out_ Windows::Foundation::Numerics::Vector3* value);
    IFACEMETHOD(get_TargetId)(_Out_ HSTRING* value);

private:

};
ActivatableClassWithFactory(PerceptionCorrelation, PerceptionCorrelationFactory);

}
}
}
}

// PerceptionCorrelationFactory.cpp
// Copyright (c) Microsoft Corporation. All rights reserved.
#include "PerceptionCorrelationFactory.h"

using namespace Microsoft::WRL;
using namespace Windows::Foundation::Numerics;

namespace Windows
{
namespace Devices
{
namespace Perception
{
namespace Provider
{
// Windows::Devices::Perception::Provider::IPerceptionCorrelationFactory
IFACEMETHODIMP PerceptionCorrelationFactory::Create(_In_ HSTRING /* targetId */, _In_ Vector3 /* position */, _In_ Quaternion /* orientation */, _Outptr_ IPerceptionCorrelation** /* value */)
{
    return E_NOTIMPL;
}

// IActivationFactory
IFACEMETHODIMP PerceptionCorrelationFactory::ActivateInstance(_Outptr_ IInspectable** inspectable)
{
    return E_NOTIMPL;
}

}
}
}
}

// PerceptionCorrelationFactory.h
// Copyright (c) Microsoft Corporation. All rights reserved.
#pragma once

#include <Windows.Devices.h>
#include <Windows.Foundation.h>
#include <wrl/implements.h>

namespace Windows
{
namespace Devices
{
namespace Perception
{
namespace Provider
{
class PerceptionCorrelationFactory WrlFinal : public Microsoft::WRL::AgileActivationFactory<
    Windows::Devices::Perception::Provider::IPerceptionCorrelationFactory
    >
{
    InspectableClassStatic(RuntimeClass_Windows_Devices_Perception_Provider_PerceptionCorrelationFactory, TrustLevel::BaseTrust);

public:
    PerceptionCorrelationFactory();
    HRESULT RuntimeClassInitialize();

    // Windows::Devices::Perception::Provider::IPerceptionCorrelationFactory
    IFACEMETHOD(Create)(_In_ HSTRING /* targetId */, _In_ Windows::Foundation::Numerics::Vector3 /* position */, _In_ Windows::Foundation::Numerics::Quaternion /* orientation */, _Outptr_ Windows::Devices::Perception::Provider::IPerceptionCorrelation** /* value */);

    // IActivationFactory
    IFACEMETHOD(ActivateInstance)(_Outptr_ IInspectable** inspectable);

private:

};


}
}
}
}

// PerceptionCorrelationGroup.cpp
// Copyright (c) Microsoft Corporation. All rights reserved.
#include "PerceptionCorrelationGroup.h"

using namespace Microsoft::WRL;
using namespace Windows::Foundation::Collections;

namespace Windows
{
namespace Devices
{
namespace Perception
{
namespace Provider
{
// Windows::Devices::Perception::Provider::IPerceptionCorrelationGroup
IFACEMETHODIMP PerceptionCorrelationGroup::get_RelativeLocations(_Outptr_ IVectorView<IPerceptionCorrelation>** /* value */)
{
    return E_NOTIMPL;
}

}
}
}
}

// PerceptionCorrelationGroup.h
// Copyright (c) Microsoft Corporation. All rights reserved.
#pragma once

#include <Windows.Devices.h>
#include <Windows.Foundation.h>
#include "PerceptionCorrelationGroupFactory.h"
#include <wrl/implements.h>

namespace Windows
{
namespace Devices
{
namespace Perception
{
namespace Provider
{
class PerceptionCorrelationGroup WrlFinal : public Microsoft::WRL::RuntimeClass<
    Microsoft::WRL::FtmBase,
    Windows::Devices::Perception::Provider::IPerceptionCorrelationGroup
    >
{
    InspectableClass(RuntimeClass_Windows_Devices_Perception_Provider_PerceptionCorrelationGroup, TrustLevel::BaseTrust);

public:
    PerceptionCorrelationGroup();
    HRESULT RuntimeClassInitialize();

    // Windows::Devices::Perception::Provider::IPerceptionCorrelationGroup
    IFACEMETHOD(get_RelativeLocations)(_Outptr_ Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::Provider::IPerceptionCorrelation>** value);

private:

};
ActivatableClassWithFactory(PerceptionCorrelationGroup, PerceptionCorrelationGroupFactory);

}
}
}
}

// PerceptionCorrelationGroupFactory.cpp
// Copyright (c) Microsoft Corporation. All rights reserved.
#include "PerceptionCorrelationGroupFactory.h"

using namespace Microsoft::WRL;
using namespace Windows::Foundation::Collections;

namespace Windows
{
namespace Devices
{
namespace Perception
{
namespace Provider
{
// Windows::Devices::Perception::Provider::IPerceptionCorrelationGroupFactory
IFACEMETHODIMP PerceptionCorrelationGroupFactory::Create(_In_ IIterable<IPerceptionCorrelation>* /* relativeLocations */, _Outptr_ IPerceptionCorrelationGroup** /* value */)
{
    return E_NOTIMPL;
}

// IActivationFactory
IFACEMETHODIMP PerceptionCorrelationGroupFactory::ActivateInstance(_Outptr_ IInspectable** inspectable)
{
    return E_NOTIMPL;
}

}
}
}
}

// PerceptionCorrelationGroupFactory.h
// Copyright (c) Microsoft Corporation. All rights reserved.
#pragma once

#include <Windows.Devices.h>
#include <Windows.Foundation.h>
#include <wrl/implements.h>

namespace Windows
{
namespace Devices
{
namespace Perception
{
namespace Provider
{
class PerceptionCorrelationGroupFactory WrlFinal : public Microsoft::WRL::AgileActivationFactory<
    Windows::Devices::Perception::Provider::IPerceptionCorrelationGroupFactory
    >
{
    InspectableClassStatic(RuntimeClass_Windows_Devices_Perception_Provider_PerceptionCorrelationGroupFactory, TrustLevel::BaseTrust);

public:
    PerceptionCorrelationGroupFactory();
    HRESULT RuntimeClassInitialize();

    // Windows::Devices::Perception::Provider::IPerceptionCorrelationGroupFactory
    IFACEMETHOD(Create)(_In_ Windows::Foundation::Collections::IIterable<Windows::Devices::Perception::Provider::IPerceptionCorrelation>* /* relativeLocations */, _Outptr_ Windows::Devices::Perception::Provider::IPerceptionCorrelationGroup** /* value */);

    // IActivationFactory
    IFACEMETHOD(ActivateInstance)(_Outptr_ IInspectable** inspectable);

private:

};


}
}
}
}

