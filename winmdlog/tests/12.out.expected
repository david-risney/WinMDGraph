#include <Windows.Devices.h>
#include <Windows.Foundation.h>
#include <wrl/implements.h>

using namespace Microsoft::WRL;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;

namespace Windows
{
namespace Devices
{
namespace PointOfService
{
class ClaimedBarcodeScanner WrlFinal : RuntimeClass<
    FtmBase,
    IClaimedBarcodeScanner,
    IClosable,
    IClaimedBarcodeScanner1,
    IClaimedBarcodeScanner2
    >
{
    InspectableClass(RuntimeClass_Windows_Devices_PointOfService_ClaimedBarcodeScanner, BaseTrust);

public:
    ClaimedBarcodeScanner();
    HRESULT RuntimeClassInitialize();

    // Windows::Devices::PointOfService::IClaimedBarcodeScanner
    IFACEMETHOD(EnableAsync)(_Outptr_ IAsyncAction** value);
    IFACEMETHOD(DisableAsync)(_Outptr_ IAsyncAction** value);
    IFACEMETHOD(RetainDevice)();
    IFACEMETHOD(SetActiveSymbologiesAsync)(_In_ IIterable<UINT32>* symbologies, _Outptr_ IAsyncAction** value);
    IFACEMETHOD(ResetStatisticsAsync)(_In_ IIterable<HSTRING>* statisticsCategories, _Outptr_ IAsyncAction** value);
    IFACEMETHOD(UpdateStatisticsAsync)(_In_ IIterable<IKeyValuePair<HSTRING, HSTRING>>* statistics, _Outptr_ IAsyncAction** value);
    IFACEMETHOD(SetActiveProfileAsync)(_In_ HSTRING profile, _Outptr_ IAsyncAction** value);
    IFACEMETHOD(get_DeviceId)(_Out_ HSTRING* value);
    IFACEMETHOD(get_IsEnabled)(_Out_ boolean* value);
    IFACEMETHOD(get_IsDecodeDataEnabled)(_Out_ boolean* value);
    IFACEMETHOD(put_IsDecodeDataEnabled)(_In_ boolean value);
    IFACEMETHOD(get_IsDisabledOnDataReceived)(_Out_ boolean* value);
    IFACEMETHOD(put_IsDisabledOnDataReceived)(_In_ boolean value);
    IFACEMETHOD(add_DataReceived)(_In_ TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerDataReceivedEventArgs>* eventHandler, _Out_ EventRegistrationToken* token);
    IFACEMETHOD(remove_DataReceived)(_In_ EventRegistrationToken token);
    IFACEMETHOD(add_ErrorOccurred)(_In_ TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerErrorOccurredEventArgs>* eventHandler, _Out_ EventRegistrationToken* token);
    IFACEMETHOD(remove_ErrorOccurred)(_In_ EventRegistrationToken token);
    IFACEMETHOD(add_ImagePreviewReceived)(_In_ TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerImagePreviewReceivedEventArgs>* eventHandler, _Out_ EventRegistrationToken* token);
    IFACEMETHOD(remove_ImagePreviewReceived)(_In_ EventRegistrationToken token);
    IFACEMETHOD(add_ReleaseDeviceRequested)(_In_ IEventHandler<ClaimedBarcodeScanner>* eventHandler, _Out_ EventRegistrationToken* token);
    IFACEMETHOD(remove_ReleaseDeviceRequested)(_In_ EventRegistrationToken token);
    IFACEMETHOD(add_TriggerPressed)(_In_ IEventHandler<ClaimedBarcodeScanner>* eventHandler, _Out_ EventRegistrationToken* token);
    IFACEMETHOD(remove_TriggerPressed)(_In_ EventRegistrationToken token);
    IFACEMETHOD(add_TriggerReleased)(_In_ IEventHandler<ClaimedBarcodeScanner>* eventHandler, _Out_ EventRegistrationToken* token);
    IFACEMETHOD(remove_TriggerReleased)(_In_ EventRegistrationToken token);

    // Windows::Foundation::IClosable
    IFACEMETHOD(Close)();

    // Windows::Devices::PointOfService::IClaimedBarcodeScanner1
    IFACEMETHOD(StartSoftwareTriggerAsync)(_Outptr_ IAsyncAction** value);
    IFACEMETHOD(StopSoftwareTriggerAsync)(_Outptr_ IAsyncAction** value);

    // Windows::Devices::PointOfService::IClaimedBarcodeScanner2
    IFACEMETHOD(GetSymbologyAttributesAsync)(_In_ UINT32 barcodeSymbology, _Outptr_ IAsyncOperation<BarcodeSymbologyAttributes>** value);
    IFACEMETHOD(SetSymbologyAttributesAsync)(_In_ UINT32 barcodeSymbology, _In_ BarcodeSymbologyAttributes* attributes, _Outptr_ IAsyncOperation<boolean>** value);

private:
    AgileEventSource<TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerDataReceivedEventArgs>> m_DataReceivedEventHandlers;
    AgileEventSource<TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerErrorOccurredEventArgs>> m_ErrorOccurredEventHandlers;
    AgileEventSource<TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerImagePreviewReceivedEventArgs>> m_ImagePreviewReceivedEventHandlers;
    AgileEventSource<IEventHandler<ClaimedBarcodeScanner>> m_ReleaseDeviceRequestedEventHandlers;
    AgileEventSource<IEventHandler<ClaimedBarcodeScanner>> m_TriggerPressedEventHandlers;
    AgileEventSource<IEventHandler<ClaimedBarcodeScanner>> m_TriggerReleasedEventHandlers;
};


// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::EnableAsync(_Outptr_ IAsyncAction** value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::DisableAsync(_Outptr_ IAsyncAction** value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::RetainDevice()
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::SetActiveSymbologiesAsync(_In_ IIterable<UINT32>* symbologies, _Outptr_ IAsyncAction** value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::ResetStatisticsAsync(_In_ IIterable<HSTRING>* statisticsCategories, _Outptr_ IAsyncAction** value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::UpdateStatisticsAsync(_In_ IIterable<IKeyValuePair<HSTRING, HSTRING>>* statistics, _Outptr_ IAsyncAction** value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::SetActiveProfileAsync(_In_ HSTRING profile, _Outptr_ IAsyncAction** value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::add_DataReceived(_In_ TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerDataReceivedEventArgs>* eventHandler, _Out_ EventRegistrationToken* token)
{
    return m_DataReceivedEventHandlers.Add(eventHandler, token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::remove_DataReceived(_In_ EventRegistrationToken token)
{
    return m_DataReceivedEventHandlers.Remove(token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::add_ErrorOccurred(_In_ TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerErrorOccurredEventArgs>* eventHandler, _Out_ EventRegistrationToken* token)
{
    return m_ErrorOccurredEventHandlers.Add(eventHandler, token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::remove_ErrorOccurred(_In_ EventRegistrationToken token)
{
    return m_ErrorOccurredEventHandlers.Remove(token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::add_ImagePreviewReceived(_In_ TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerImagePreviewReceivedEventArgs>* eventHandler, _Out_ EventRegistrationToken* token)
{
    return m_ImagePreviewReceivedEventHandlers.Add(eventHandler, token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::remove_ImagePreviewReceived(_In_ EventRegistrationToken token)
{
    return m_ImagePreviewReceivedEventHandlers.Remove(token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::add_ReleaseDeviceRequested(_In_ IEventHandler<ClaimedBarcodeScanner>* eventHandler, _Out_ EventRegistrationToken* token)
{
    return m_ReleaseDeviceRequestedEventHandlers.Add(eventHandler, token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::remove_ReleaseDeviceRequested(_In_ EventRegistrationToken token)
{
    return m_ReleaseDeviceRequestedEventHandlers.Remove(token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::add_TriggerPressed(_In_ IEventHandler<ClaimedBarcodeScanner>* eventHandler, _Out_ EventRegistrationToken* token)
{
    return m_TriggerPressedEventHandlers.Add(eventHandler, token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::remove_TriggerPressed(_In_ EventRegistrationToken token)
{
    return m_TriggerPressedEventHandlers.Remove(token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::add_TriggerReleased(_In_ IEventHandler<ClaimedBarcodeScanner>* eventHandler, _Out_ EventRegistrationToken* token)
{
    return m_TriggerReleasedEventHandlers.Add(eventHandler, token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::remove_TriggerReleased(_In_ EventRegistrationToken token)
{
    return m_TriggerReleasedEventHandlers.Remove(token);
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::get_DeviceId(_Out_ HSTRING* value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::get_IsEnabled(_Out_ boolean* value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::get_IsDecodeDataEnabled(_Out_ boolean* value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::put_IsDecodeDataEnabled(_In_ boolean value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::get_IsDisabledOnDataReceived(_Out_ boolean* value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner
IFACEMETHODIMP ClaimedBarcodeScanner::put_IsDisabledOnDataReceived(_In_ boolean value)
{
    return E_NOTIMPL;
}

// Windows::Foundation::IClosable
IFACEMETHODIMP ClaimedBarcodeScanner::Close()
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner1
IFACEMETHODIMP ClaimedBarcodeScanner::StartSoftwareTriggerAsync(_Outptr_ IAsyncAction** value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner1
IFACEMETHODIMP ClaimedBarcodeScanner::StopSoftwareTriggerAsync(_Outptr_ IAsyncAction** value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner2
IFACEMETHODIMP ClaimedBarcodeScanner::GetSymbologyAttributesAsync(_In_ UINT32 barcodeSymbology, _Outptr_ IAsyncOperation<BarcodeSymbologyAttributes>** value)
{
    return E_NOTIMPL;
}

// Windows::Devices::PointOfService::IClaimedBarcodeScanner2
IFACEMETHODIMP ClaimedBarcodeScanner::SetSymbologyAttributesAsync(_In_ UINT32 barcodeSymbology, _In_ BarcodeSymbologyAttributes* attributes, _Outptr_ IAsyncOperation<boolean>** value)
{
    return E_NOTIMPL;
}

}
}
}
