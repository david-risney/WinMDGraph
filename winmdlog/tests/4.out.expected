// GpioPin.cpp
// Copyright (c) Microsoft Corporation. All rights reserved.
#include "GpioPin.h"

using namespace Microsoft::WRL;
using namespace Windows::Foundation;

namespace Windows
{
namespace Devices
{
namespace Gpio
{
// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::IsDriveModeSupported(_In_ GpioPinDriveMode /* driveMode */, _Out_ boolean* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::GetDriveMode(_Out_ GpioPinDriveMode* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::SetDriveMode(_In_ GpioPinDriveMode /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::Write(_In_ GpioPinValue /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::Read(_Out_ GpioPinValue* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::add_ValueChanged(_In_ TypedEventHandler<IGpioPin, IGpioPinValueChangedEventArgs>* eventHandler, _Out_ EventRegistrationToken* token)
{
    return m_ValueChangedEventHandlers.Add(eventHandler, token);
}

// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::remove_ValueChanged(_In_ EventRegistrationToken token)
{
    return m_ValueChangedEventHandlers.Remove(token);
}

// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::get_PinNumber(_Out_ INT32* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::get_SharingMode(_Out_ GpioSharingMode* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::get_DebounceTimeout(_Out_ TimeSpan* /* value */)
{
    return E_NOTIMPL;
}

// Windows::Devices::Gpio::IGpioPin
IFACEMETHODIMP GpioPin::put_DebounceTimeout(_In_ TimeSpan /* value */)
{
    return E_NOTIMPL;
}

// Windows::Foundation::IClosable
IFACEMETHODIMP GpioPin::Close()
{
    return E_NOTIMPL;
}

}
}
}

// GpioPin.h
// Copyright (c) Microsoft Corporation. All rights reserved.
#pragma once

#include <Windows.Devices.h>
#include <Windows.Foundation.h>
#include <wrl/implements.h>

namespace Windows
{
namespace Devices
{
namespace Gpio
{
class GpioPin WrlFinal : public Microsoft::WRL::RuntimeClass<
    Microsoft::WRL::FtmBase,
    Windows::Devices::Gpio::IGpioPin,
    Windows::Foundation::IClosable
    >
{
    InspectableClass(RuntimeClass_Windows_Devices_Gpio_GpioPin, TrustLevel::BaseTrust);

public:
    GpioPin();
    HRESULT RuntimeClassInitialize();

    // Windows::Devices::Gpio::IGpioPin
    IFACEMETHOD(IsDriveModeSupported)(_In_ Windows::Devices::Gpio::GpioPinDriveMode /* driveMode */, _Out_ boolean* /* value */);
    IFACEMETHOD(GetDriveMode)(_Out_ Windows::Devices::Gpio::GpioPinDriveMode* /* value */);
    IFACEMETHOD(SetDriveMode)(_In_ Windows::Devices::Gpio::GpioPinDriveMode /* value */);
    IFACEMETHOD(Write)(_In_ Windows::Devices::Gpio::GpioPinValue /* value */);
    IFACEMETHOD(Read)(_Out_ Windows::Devices::Gpio::GpioPinValue* /* value */);
    IFACEMETHOD(get_PinNumber)(_Out_ INT32* value);
    IFACEMETHOD(get_SharingMode)(_Out_ Windows::Devices::Gpio::GpioSharingMode* value);
    IFACEMETHOD(get_DebounceTimeout)(_Out_ Windows::Foundation::TimeSpan* value);
    IFACEMETHOD(put_DebounceTimeout)(_In_ Windows::Foundation::TimeSpan value);
    IFACEMETHOD(add_ValueChanged)(_In_ Windows::Foundation::TypedEventHandler<Windows::Devices::Gpio::IGpioPin, Windows::Devices::Gpio::IGpioPinValueChangedEventArgs>* eventHandler, _Out_ EventRegistrationToken* token);
    IFACEMETHOD(remove_ValueChanged)(_In_ EventRegistrationToken token);

    // Windows::Foundation::IClosable
    IFACEMETHOD(Close)();

private:
    AgileEventSource<Windows::Foundation::TypedEventHandler<Windows::Devices::Gpio::IGpioPin, Windows::Devices::Gpio::IGpioPinValueChangedEventArgs>> m_ValueChangedEventHandlers;
};


}
}
}

// GpioPinValueChangedEventArgs.cpp
// Copyright (c) Microsoft Corporation. All rights reserved.
#include "GpioPinValueChangedEventArgs.h"

using namespace Microsoft::WRL;


namespace Windows
{
namespace Devices
{
namespace Gpio
{
// Windows::Devices::Gpio::IGpioPinValueChangedEventArgs
IFACEMETHODIMP GpioPinValueChangedEventArgs::get_Edge(_Out_ GpioPinEdge* /* value */)
{
    return E_NOTIMPL;
}

}
}
}

// GpioPinValueChangedEventArgs.h
// Copyright (c) Microsoft Corporation. All rights reserved.
#pragma once

#include <Windows.Devices.h>
#include <wrl/implements.h>

namespace Windows
{
namespace Devices
{
namespace Gpio
{
class GpioPinValueChangedEventArgs WrlFinal : public Microsoft::WRL::RuntimeClass<
    Microsoft::WRL::FtmBase,
    Windows::Devices::Gpio::IGpioPinValueChangedEventArgs
    >
{
    InspectableClass(RuntimeClass_Windows_Devices_Gpio_GpioPinValueChangedEventArgs, TrustLevel::BaseTrust);

public:
    GpioPinValueChangedEventArgs();
    HRESULT RuntimeClassInitialize();

    // Windows::Devices::Gpio::IGpioPinValueChangedEventArgs
    IFACEMETHOD(get_Edge)(_Out_ Windows::Devices::Gpio::GpioPinEdge* value);

private:

};


}
}
}

